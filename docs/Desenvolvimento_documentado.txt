O Database MIT-BIH Arrhythmia Database possui um total de 48 pacientes, cada um tendo o sinal ECG medido durante 30 min com uma frequência de 360Hz

Dito isto, o arquivo .dat que armazena o sinal ECG bruto possui um total de 650000 linhas por paciente.

Já o arquivo .atr que armazena anotações classificando o batimento de um paciente em um sample específico, possui em média 2200 até 3000 linhas.

O motivo disso é que as classificações em cada sample SEMPRE são no pico R. E com isso, vem a parte mais importante para a entrada de dados no treinamento da IA.

A classe ConvertDataMIT definida faz toda a parte do pré-processamento, desde a aquisição dos arquivos até a tratativa dos dados para input no treinamento da IA

As funções já estão explicadas detalhadamente dentro do próprio código, então, a baixo será um resumo de todas as funções:
- download_files_mitdb: Faz o download dos arquivos disponibilizados no mit e salva no diretório do projeto no formato: mitdb/paciente_n°paciente/n°paciente.atr, 
n°paciente.dat e n°paciente.hea
- extract_raw_data_each_patient: Extraí os dados brutos e as anotações dos arquivos do paciente.
- bandpass_filter: Aplica o filtro passa-banda entre 0,5Hz até 40Hz para remoção dos ruídos.
- segment_beats: Esse é o pré-processamento mais importante e não será apenas resumido. Essa função é responsável por mapear o pico R de cada batimento
de um paciente através das anotações extraídas do arquivo .atr e criando uma janela em cima do sample desse pico R. Essa janela será responsável por obter a 
morfologia da onda PQRST do batimento e normalizar a própria janela para a IA focar nessa morfologia. Essa parte é essencial porque a característica mais
importante para detecção de arritmias é justamente a morfologia da onda PQRST de um batimento.
- map_to_aami: Padroniza a classificação dos batimentos conforme a classe AAMI.
- pre_process_patient: Chama todas as funções responsáveis pela aquisição dos dados e pré-processamento e especifica o n° do paciente.
- pre_process_data: Realiza uma estrututa de repetição para que todos os 48 pacientes passem pelo pré-processamento e faz um append de todos, gerando um array 
com todos eles salvos.

Com o próprio treinamento da IA, será identificado a necessidade de utilizar as 2 funções que estão comentadas.
Pontos a serem observados:
A classificação dos batimentos são 5 possibilidades conforme a classe AAMI.
Tamanho total = 112555
- N (Normal) = 90588
- S (Supraventricular) = 2781
- V (Ventricular) = 7235
- F (Fusion) = 802
- Q (Unknown/Other) = 11149
Excluindo a classificação Q (Unknown/Other), o tamanho total ficaria = 101406

TREINAMENTO DO MODELO com CNN: OBSERVAÇÕES
De início, adaptei o modelo para treinar sem muitas alterações. Dividi 80/20 treino e teste e adicionei peso para as classes minóritárias (S, V e F)
Resultado: Completo fracasso.
O modelo não conseguia validar as classes minoritárias e nem aprender direito. Aqui, verifiquei o problema que inicialmente já imaginei que teria 
que é o desbalancemaneto de classes.
A partir disso, fiz alguns ajustes como adicionar SMOTE para criar batimentos artificiais minoritários, e implementei focal loss com pesos de classe.
Mesmo assim, o resultado não ficou bom. Melhorou comparado ao início, mas ainda não seria o suficiente.
Por isso, será realizado uma adição de uma feature temporal que possibilita uma melhor detecção de arritmias.

TREINAMENTO DO MODELO COM CNN + feature temporal (MLP):
Como início, foi implementado no pré-processamento junto com a morfologia da onda as características temporais e morfológicas dos batimentos. Ou seja, 
cada batimento terá a morfologia da onda, a classificação e as características que serão explicadas a seguir.

ATENÇÃO: É muito importante entender que todas as features e a morfologia da onda são feitas por BATIMENTO.

Entre as características temporais, foram consideradas:
- O intervalo rr atual (Pega a diferença do tempo em segundos do pico R do batimento anterior e o pico r do batimento atual)
- O intervalo rr anterior (Ainda considerando o batimento atual, pega a diferença do tempo em segundos do pico R do batimento em -2 e o batimento anterior. 
Mesmo que não seja considerado o batimento atual nesse cálculo).
- Calcula a variabilidade entre o intervalo rr atual e o intervalo rr anterior
- O intervalo rr posterior (Pega a diferença do tempo em segundos do pico R do batimento atual e do pico r do batimento posterior).
- Cálcula os batimentos por minuto considerando o intervalo rr atual (Por exemplo, se o intervalo atual for 0,8s então teria 75bpm.)
Existem arritmias que não são facilmente detectadas apenas pela morfologia da onda, mas principalmente pelas alterações no ritmo. Por isso, é crucial pegar o 
contexto dos intervalos dos batimentos para identificar se durante um batimento e outro teve irregularidade ou uma grande diferença nos intervalos.

As características morfológicas são feitas para terem uma função parecida com a morfologia extraída para a CNN. Mas com a migração do treinamento para o modelo 
hibrido e não CNN pura, essas características permitiram a CNN focar em aprender padrões mais sutis reduzindo a carga da CNN.
O motivo de utilizar essas features é para melhorar o máximo possível o treinamento, visto que os dados de input não são grandes e o treinamento 
precisa ser mais simples.

CNN -> Não mudou nada, foi utilizado as janelas dos batimentos com a morfologia da onda como input. 

MLP -> Utilizou-se das características extraídas, tanto temporal quanto morfológica.

Muita coisa foi parecida com o treinamento anterior. Ainda foi implementado SMOTE para criar batimentos artificiais das classes minoritárias, ainda foi utilizado
focal loss com pesos de classe e houve a separação de grupos (batimentos de pacientes utilizados no treino não foram misturados com o teste).
Os resultados foram bem melhores. O problema de overfitting foi resolvido, a classe normal teve muito pouco falso negativo e a classe de arritmias melhorou na
sensibilidade e na separação de classes. Porém, os dados utilizados no modelo são clínicos e por consequência muito sensíveis. Falsos negativos do batimento
normal são erros críticos e falsos positivos de batimentos de arritmias são igualmente críticos. Por tanto, o modelo de IA desenvolvido somente utilizando do banco
do MIT não seria o suficiente para termos o resultado esperado ao final do TCC. Dito isso, foi feito a conclusão da necessidade de realizar um treinamento de modelo
mais robusto e ter um melhor resultado no teste. Para isso, será necessário ter um dataset melhor e igualmente mais robusto, o qual será o 
PTB-XL da PhysioNet.

Motivos principais para a migração de dataset:
- O MIT possui classificação por batimento, já o PTB-XL possui classificação por sinal ECG. Dito isso, o MIT é um dataset melhor para monitoramento do sinal 
cardíaco, enquanto isso, o PTB-XL é um dataset melhor para diagnóstico clínico que é o foco desse projeto. Não precisaria continuar a listar motivos, 
mas vamos mesmo assim.
- Ambos possuem problemas com balanceamento de classes, mas como o MIT é classificado por batimento, esse desbalanceamento é MUITO maior. O PTB-XL possui casos de
arritmia o suficiente para que seja apenas aplicado undersampling em cima das classificações normais e assim ter um balanceamento muito mais sólido. 
Precisa de mais? Então vai mais.
- Derivações em ECG são formas diferentes de se observar o sinal elétrico do coração. Usando um exemplo de carro, se você olhar de frente verá o capô, se olhar 
de lado verá a porta, se olhar de traś verá a traseira. As derivações são análisadas dessa mesma forma do exemplo do carro, ou seja, quanto mais derivações tiver,
mais perspectivas diferentes você conseguirá analisar o mesmo sinal ECG do paciente ao longo do tempo. Nesse sentido, o MIT possui 2 derivações, enquanto o PTB-XL
possui DOZE!! derivações. Ai acabou ne? NÃO.
- O PTB-XL possui um dataset muito maior, com 21000 pacientes diferentes (Mesmo que só iremos utilizar 7500 mais ou menos) e cada um dos sinais foram extraidos
10-15 seg em média além de ter 500Hz (O nosso embarcado possui 475Hz). Ou seja, fica muito mais próximo do sinal que iremos extrair do embarcado. 
A partir de todos esses motivos, foi decidido fazer a mudança para esse dataset.

PRÉ-PROCESSAMENTO PTB-XL
O pré-processamento não mudou muita coisa. As janelas foram alteradas para 5000 samples para considerar uma média de 10s do sinal por paciente, foi utilizado 
novamente o modelo AAMI de classificação, realizou-se uma detecção dos picos R para extração das features temporais, foi retirado o oversample em cima das classes
minoritárias e adicionado o undersampling na classe majoritária. E, por último, foi adicionado as 12 
derivações. Fora esses pontos não mudou nada, o filtro passa-banda continuou sendo utilizado.

TREINAMENTO DO MODELO:
Com a alteração do dataset, foi permitido aumentar muito a complexidade do treinamento. A priori, cotinuou sendo um modelo híbrido com uma CNN 1D. Mas o
maior ponto de mudança foi a adição das derivações no treinamento. Essa adição junto com as janelas impulsionaram MUITO a performance da rede neural CNN.

